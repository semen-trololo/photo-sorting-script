from hachoir.parser import createParser
from hachoir.metadata import extractMetadata
from hachoir.core import config as HachoirConfig
import os
import shutil
from tkinter import *
import tkinter.filedialog as fd
from tkinter import scrolledtext
# pip install hachoir
global check_patch
global target_patch

file_extension_foto = ['jpg', 'gif', 'bmp', 'png', 'JPG', 'GIF', 'BMP', 'PNG', 'TIFF', 'tiff', 'TIF', 'tif']
file_extension_video = ['mp4', 'avi', 'MP4', 'AVI', 'MKV', 'mkv']
calendar = {
    '1': 'January',
    '2': 'February',
    '3': 'March',
    '4': 'April',
    '5': 'May',
    '6': 'June',
    '7': 'July',
    '8': 'August',
    '9': 'September',
    '10': 'October',
    '11': 'November',
    '12': 'December'
}

HachoirConfig.quiet = True


def choose_directory():
    directory = fd.askdirectory(title="Открыть папку", initialdir="/")
    if directory:
        lbl.config(text=directory)
        global check_patch
        check_patch = directory


def choose_directory_2():
    directory = fd.askdirectory(title="Открыть папку", initialdir="/")
    if directory:
        lbl_2.config(text=directory)
        global target_patch
        target_patch = directory


def start():
    txt.delete(1.0, END)
    btn["state"] = "disabled"
    btn_2["state"] = "disabled"
    btn_3["state"] = "disabled"
    txt.insert(INSERT, f'[!] START....\n')
    window.update()
    list_file_dir(check_patch)
    txt.insert(INSERT, f'[!] FINISH, OK....')
    btn["state"] = "normal"
    btn_2["state"] = "normal"
    btn_3["state"] = "normal"
    window.update()


def crate_patch(data_time):
    tmp_patch = os.sep.join([target_patch, str(data_time.year)])
    if os.path.isdir(tmp_patch):
        if os.path.isdir(os.sep.join([tmp_patch, calendar.get(str(data_time.month))])):
            tmp_patch = os.sep.join([tmp_patch, calendar.get(str(data_time.month))])
            return tmp_patch
        else:
            os.mkdir(os.sep.join([tmp_patch, calendar.get(str(data_time.month))]))
            tmp_patch = os.sep.join([tmp_patch, calendar.get(str(data_time.month))])
            return tmp_patch
    else:
        os.mkdir(tmp_patch)
        if os.path.isdir(os.sep.join([tmp_patch, calendar.get(str(data_time.month))])):
            tmp_patch = os.sep.join([tmp_patch, calendar.get(str(data_time.month))])
            return tmp_patch
        else:
            os.mkdir(os.sep.join([tmp_patch, calendar.get(str(data_time.month))]))
            tmp_patch = os.sep.join([tmp_patch, calendar.get(str(data_time.month))])
            return tmp_patch


def copy_file(patch, name):
    try:
        data_time = creation_date(patch)
        exit_patch = crate_patch(data_time)
        shutil.copy(patch, os.sep.join([exit_patch, name]))
    except:
        txt.insert(INSERT, f'[!] Error get data {patch} \n')
        window.update()
        print('[!] Error get data', patch)
        copy_tmp_file(patch, name)


def copy_file_video(patch, name):
    try:
        data_time = creation_date(patch)
        exit_patch = crate_patch(data_time)
        if os.path.isdir(os.sep.join([exit_patch, 'video'])):
            exit_patch = os.sep.join([exit_patch, 'video'])
            shutil.copy(patch, os.sep.join([exit_patch, name]))
        else:
            os.mkdir(os.sep.join([exit_patch, 'video']))
            exit_patch = os.sep.join([exit_patch, 'video'])
            shutil.copy(patch, os.sep.join([exit_patch, name]))
    except:
        txt.insert(INSERT, f'[!] Error get data {patch} \n')
        window.update()
        print('[!] Error get data', patch)
        copy_tmp_file(patch, name)


def copy_tmp_file(patch, name):
    if os.path.isdir(os.sep.join([target_patch, 'tmp'])):
        exit_patch = os.sep.join([target_patch, 'tmp'])
        shutil.copy(patch, os.sep.join([exit_patch, name]))
    else:
        os.mkdir(os.sep.join([target_patch, 'tmp']))
        exit_patch = os.sep.join([target_patch, 'tmp'])
        shutil.copy(patch, os.sep.join([exit_patch, name]))


def creation_date(filename):
    parser = createParser(filename)
    metadata = extractMetadata(parser)
    data_time = metadata.get('creation_date')
    del parser
    del metadata
    return data_time


def list_file_dir(target_patch):
    list_file = os.listdir(target_patch)
    for name in list_file:
        if os.path.isfile(os.sep.join([target_patch, name])):
            if name.split('.')[1] in file_extension_foto:
                copy_file(os.sep.join([target_patch, name]), name)
            elif name.split('.')[1] in file_extension_video:
                copy_file_video(os.sep.join([target_patch, name]), name)
            else:
                txt.insert(INSERT, f'[!] unknown expansion {name} \n')
                window.update()
                print('[!] unknown expansion', name)
                copy_tmp_file(os.sep.join([target_patch, name]), name)
        else:
            #txt.insert(INSERT, f'[*] Go to dir --> {name} \n')
            #window.update()
            print(f'[*] Go to dir --> {name}')
            list_file_dir(os.sep.join([target_patch, name]))


window = Tk()
window.title("Foto Sort")
window.geometry('750x500')
lbl = Label(window, text="Папка фотографий")
lbl.grid(column=0, row=0)
btn = Button(window, text="Выбрать папку", command=choose_directory)
btn.grid(column=1, row=0)
lbl_2 = Label(window, text="Место назначения")
lbl_2.grid(column=0, row=1)
btn_2 = Button(window, text="Выбрать папку", command=choose_directory_2)
btn_2.grid(column=1, row=1)
btn_3 = Button(window, text="СТАРТ", command=start)
btn_3.grid(column=1, row=3)
txt = scrolledtext.ScrolledText(window, width=60, height=20)
txt.grid(column=1, row=2)
window.mainloop()

